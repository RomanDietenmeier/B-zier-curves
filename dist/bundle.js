/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
//https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Constructing_B%C3%A9zier_curves
(function () {
    var canvas = document.createElement("canvas");
    var width = 640;
    var height = 640;
    canvas.width = width;
    canvas.height = height;
    var canvasContext = canvas.getContext("2d");
    document.body.append(canvas);
    function drawClearRect() {
        canvasContext.beginPath();
        canvasContext.rect(0, 0, width, height);
        canvasContext.fillStyle = "#eee";
        canvasContext.fill();
        canvasContext.fillStyle = "#000";
        canvasContext.font = "20px Consolas";
        canvasContext.fillText(" Left Click: Set Point", 1, 20);
        canvasContext.fillText("Right Click: Confirm", 1, 40);
        canvasContext.fillText("BÃ©zier curves", width - 150, 20);
    }
    drawClearRect();
    var bezierPoints = [];
    function drawDot(x, y, color, radius) {
        if (radius === void 0) { radius = 1; }
        canvasContext.beginPath();
        canvasContext.arc(x, y, Math.max(1, radius), 0, 2 * Math.PI);
        canvasContext.fillStyle = color !== null && color !== void 0 ? color : "#000";
        canvasContext.fill();
    }
    function addBezierPointAndDraw(x, y) {
        if (bezierPoints.length < 1)
            drawClearRect();
        bezierPoints.push({ x: x, y: y });
        drawDot(x, y, "red", 3);
    }
    function factorial(n) {
        if (n < 1)
            return 1;
        var ret = 1;
        for (var i = Math.floor(n); i > 1; i--) {
            ret *= i;
        }
        return ret;
    }
    function binomialCoefficient(n, k) {
        console.assert(k <= n && k >= 0, "illegal binomialCoefficient ".concat(n, " over ").concat(k));
        return factorial(n) / (factorial(k) * factorial(n - k));
    }
    function multScalarWithPoint(p, s) {
        return { x: p.x * s, y: p.y * s };
    }
    function addTwoPoints(lhs, rhs) {
        return { x: lhs.x + rhs.x, y: lhs.y + rhs.y };
    }
    function calcBezierY(t) {
        console.assert(t >= 0 && t <= 1, "t out of bounds");
        var erg = { x: 0, y: 0 };
        for (var i = 0; i < bezierPoints.length; i++) {
            var p = multScalarWithPoint(bezierPoints[i], binomialCoefficient(bezierPoints.length - 1, i) *
                Math.pow(1 - t, bezierPoints.length - 1 - i) *
                Math.pow(t, i));
            console.log("p ".concat(i, ":"), Math.pow(t, i), Math.pow(1 - t, bezierPoints.length - i), binomialCoefficient(bezierPoints.length, i));
            erg = addTwoPoints(p, erg);
        }
        return erg;
    }
    function onClick(clickEvent) {
        clickEvent.preventDefault();
        var x = clickEvent.clientX - canvas.offsetLeft;
        var y = clickEvent.clientY - canvas.offsetTop;
        console.log(clickEvent);
        addBezierPointAndDraw(x, y);
    }
    function onConfirm(contextMenuEvent) {
        contextMenuEvent.preventDefault();
        if (bezierPoints.length < 2)
            return;
        for (var t = 0; t <= 1; t += 0.007) {
            var point = calcBezierY(t);
            drawDot(point.x, point.y);
        }
        console.log(bezierPoints.slice());
        bezierPoints.splice(0); //clear Array
    }
    canvas.addEventListener("click", onClick);
    canvas.addEventListener("contextmenu", onConfirm);
    var buttonConfirm = document.createElement("button");
    buttonConfirm.innerText = "Confirm";
    buttonConfirm.onclick = onConfirm;
    document.body.append(document.createElement("br"));
    document.body.append(buttonConfirm);
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,